"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));

require("colors");

var _logSymbols = _interopRequireDefault(require("log-symbols"));

var _path = _interopRequireDefault(require("path"));

var _creator = require("electron-wix-msi/lib/creator");

var _authorName = _interopRequireDefault(require("./util/author-name"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MakerWix extends _makerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'wix');

    _defineProperty(this, "defaultPlatforms", ['win32']);
  }

  isSupportedOnCurrentPlatform() {
    return process.platform === 'win32';
  }

  async make({
    dir,
    makeDir,
    targetArch,
    packageJSON,
    appName
  }) {
    const outPath = _path.default.resolve(makeDir, `wix/${targetArch}`);

    await this.ensureDirectory(outPath);
    let {
      version
    } = packageJSON;

    if (version.includes('-')) {
      // eslint-disable-next-line no-console
      console.warn(_logSymbols.default.warning, 'WARNING: WiX distributables do not handle prerelease information in the app version, removing it from the MSI'.yellow);
      version = this.normalizeWindowsVersion(version);
    }

    const creator = new _creator.MSICreator({
      description: packageJSON.description,
      name: appName,
      version,
      manufacturer: (0, _authorName.default)(packageJSON.author),
      exe: `${appName}.exe`,
      ...this.config,
      appDirectory: dir,
      outputDirectory: outPath
    });

    if (this.config.beforeCreate) {
      await Promise.resolve(this.config.beforeCreate(creator));
    }

    await creator.create();
    const {
      msiFile
    } = await creator.compile();
    return [msiFile];
  }

}

exports.default = MakerWix;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlcldpeC50cyJdLCJuYW1lcyI6WyJNYWtlcldpeCIsIk1ha2VyQmFzZSIsImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJtYWtlIiwiZGlyIiwibWFrZURpciIsInRhcmdldEFyY2giLCJwYWNrYWdlSlNPTiIsImFwcE5hbWUiLCJvdXRQYXRoIiwicGF0aCIsInJlc29sdmUiLCJlbnN1cmVEaXJlY3RvcnkiLCJ2ZXJzaW9uIiwiaW5jbHVkZXMiLCJjb25zb2xlIiwid2FybiIsImxvZ1N5bWJvbHMiLCJ3YXJuaW5nIiwieWVsbG93Iiwibm9ybWFsaXplV2luZG93c1ZlcnNpb24iLCJjcmVhdG9yIiwiTVNJQ3JlYXRvciIsImRlc2NyaXB0aW9uIiwibmFtZSIsIm1hbnVmYWN0dXJlciIsImF1dGhvciIsImV4ZSIsImNvbmZpZyIsImFwcERpcmVjdG9yeSIsIm91dHB1dERpcmVjdG9yeSIsImJlZm9yZUNyZWF0ZSIsIlByb21pc2UiLCJjcmVhdGUiLCJtc2lGaWxlIiwiY29tcGlsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7OztBQUllLE1BQU1BLFFBQU4sU0FBdUJDLGtCQUF2QixDQUFpRDtBQUFBO0FBQUE7O0FBQUEsa0NBQ3ZELEtBRHVEOztBQUFBLDhDQUcxQixDQUFDLE9BQUQsQ0FIMEI7QUFBQTs7QUFLOURDLEVBQUFBLDRCQUE0QixHQUFHO0FBQzdCLFdBQU9DLE9BQU8sQ0FBQ0MsUUFBUixLQUFxQixPQUE1QjtBQUNEOztBQUVELFFBQU1DLElBQU4sQ0FBVztBQUNUQyxJQUFBQSxHQURTO0FBRVRDLElBQUFBLE9BRlM7QUFHVEMsSUFBQUEsVUFIUztBQUlUQyxJQUFBQSxXQUpTO0FBS1RDLElBQUFBO0FBTFMsR0FBWCxFQU1pQjtBQUNmLFVBQU1DLE9BQU8sR0FBR0MsY0FBS0MsT0FBTCxDQUFhTixPQUFiLEVBQXVCLE9BQU1DLFVBQVcsRUFBeEMsQ0FBaEI7O0FBQ0EsVUFBTSxLQUFLTSxlQUFMLENBQXFCSCxPQUFyQixDQUFOO0FBRUEsUUFBSTtBQUFFSSxNQUFBQTtBQUFGLFFBQWNOLFdBQWxCOztBQUNBLFFBQUlNLE9BQU8sQ0FBQ0MsUUFBUixDQUFpQixHQUFqQixDQUFKLEVBQTJCO0FBQ3pCO0FBQ0FDLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhQyxvQkFBV0MsT0FBeEIsRUFBaUMsZ0hBQWdIQyxNQUFqSjtBQUNBTixNQUFBQSxPQUFPLEdBQUcsS0FBS08sdUJBQUwsQ0FBNkJQLE9BQTdCLENBQVY7QUFDRDs7QUFFRCxVQUFNUSxPQUFPLEdBQUcsSUFBSUMsbUJBQUosQ0FBZ0I7QUFDOUJDLE1BQUFBLFdBQVcsRUFBRWhCLFdBQVcsQ0FBQ2dCLFdBREs7QUFFOUJDLE1BQUFBLElBQUksRUFBRWhCLE9BRndCO0FBRzlCSyxNQUFBQSxPQUg4QjtBQUk5QlksTUFBQUEsWUFBWSxFQUFFLHlCQUFrQmxCLFdBQVcsQ0FBQ21CLE1BQTlCLENBSmdCO0FBSzlCQyxNQUFBQSxHQUFHLEVBQUcsR0FBRW5CLE9BQVEsTUFMYztBQU05QixTQUFHLEtBQUtvQixNQU5zQjtBQU85QkMsTUFBQUEsWUFBWSxFQUFFekIsR0FQZ0I7QUFROUIwQixNQUFBQSxlQUFlLEVBQUVyQjtBQVJhLEtBQWhCLENBQWhCOztBQVdBLFFBQUksS0FBS21CLE1BQUwsQ0FBWUcsWUFBaEIsRUFBOEI7QUFDNUIsWUFBTUMsT0FBTyxDQUFDckIsT0FBUixDQUFnQixLQUFLaUIsTUFBTCxDQUFZRyxZQUFaLENBQXlCVixPQUF6QixDQUFoQixDQUFOO0FBQ0Q7O0FBQ0QsVUFBTUEsT0FBTyxDQUFDWSxNQUFSLEVBQU47QUFDQSxVQUFNO0FBQUVDLE1BQUFBO0FBQUYsUUFBYyxNQUFNYixPQUFPLENBQUNjLE9BQVIsRUFBMUI7QUFFQSxXQUFPLENBQUNELE9BQUQsQ0FBUDtBQUNEOztBQTVDNkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWFrZXJCYXNlLCB7IE1ha2VyT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9tYWtlci1iYXNlJztcbmltcG9ydCB7IEZvcmdlUGxhdGZvcm0gfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuaW1wb3J0ICdjb2xvcnMnO1xuaW1wb3J0IGxvZ1N5bWJvbHMgZnJvbSAnbG9nLXN5bWJvbHMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IE1TSUNyZWF0b3IsIE1TSUNyZWF0b3JPcHRpb25zIH0gZnJvbSAnZWxlY3Ryb24td2l4LW1zaS9saWIvY3JlYXRvcic7XG5pbXBvcnQgZ2V0TmFtZUZyb21BdXRob3IgZnJvbSAnLi91dGlsL2F1dGhvci1uYW1lJztcblxuaW1wb3J0IHsgTWFrZXJXaXhDb25maWcgfSBmcm9tICcuL0NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1ha2VyV2l4IGV4dGVuZHMgTWFrZXJCYXNlPE1ha2VyV2l4Q29uZmlnPiB7XG4gIG5hbWUgPSAnd2l4JztcblxuICBkZWZhdWx0UGxhdGZvcm1zOiBGb3JnZVBsYXRmb3JtW10gPSBbJ3dpbjMyJ107XG5cbiAgaXNTdXBwb3J0ZWRPbkN1cnJlbnRQbGF0Zm9ybSgpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJztcbiAgfVxuXG4gIGFzeW5jIG1ha2Uoe1xuICAgIGRpcixcbiAgICBtYWtlRGlyLFxuICAgIHRhcmdldEFyY2gsXG4gICAgcGFja2FnZUpTT04sXG4gICAgYXBwTmFtZSxcbiAgfTogTWFrZXJPcHRpb25zKSB7XG4gICAgY29uc3Qgb3V0UGF0aCA9IHBhdGgucmVzb2x2ZShtYWtlRGlyLCBgd2l4LyR7dGFyZ2V0QXJjaH1gKTtcbiAgICBhd2FpdCB0aGlzLmVuc3VyZURpcmVjdG9yeShvdXRQYXRoKTtcblxuICAgIGxldCB7IHZlcnNpb24gfSA9IHBhY2thZ2VKU09OO1xuICAgIGlmICh2ZXJzaW9uLmluY2x1ZGVzKCctJykpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4obG9nU3ltYm9scy53YXJuaW5nLCAnV0FSTklORzogV2lYIGRpc3RyaWJ1dGFibGVzIGRvIG5vdCBoYW5kbGUgcHJlcmVsZWFzZSBpbmZvcm1hdGlvbiBpbiB0aGUgYXBwIHZlcnNpb24sIHJlbW92aW5nIGl0IGZyb20gdGhlIE1TSScueWVsbG93KTtcbiAgICAgIHZlcnNpb24gPSB0aGlzLm5vcm1hbGl6ZVdpbmRvd3NWZXJzaW9uKHZlcnNpb24pO1xuICAgIH1cblxuICAgIGNvbnN0IGNyZWF0b3IgPSBuZXcgTVNJQ3JlYXRvcigoe1xuICAgICAgZGVzY3JpcHRpb246IHBhY2thZ2VKU09OLmRlc2NyaXB0aW9uLFxuICAgICAgbmFtZTogYXBwTmFtZSxcbiAgICAgIHZlcnNpb24sXG4gICAgICBtYW51ZmFjdHVyZXI6IGdldE5hbWVGcm9tQXV0aG9yKHBhY2thZ2VKU09OLmF1dGhvciksXG4gICAgICBleGU6IGAke2FwcE5hbWV9LmV4ZWAsXG4gICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgIGFwcERpcmVjdG9yeTogZGlyLFxuICAgICAgb3V0cHV0RGlyZWN0b3J5OiBvdXRQYXRoLFxuICAgIH0pIGFzIE1TSUNyZWF0b3JPcHRpb25zKTtcblxuICAgIGlmICh0aGlzLmNvbmZpZy5iZWZvcmVDcmVhdGUpIHtcbiAgICAgIGF3YWl0IFByb21pc2UucmVzb2x2ZSh0aGlzLmNvbmZpZy5iZWZvcmVDcmVhdGUoY3JlYXRvcikpO1xuICAgIH1cbiAgICBhd2FpdCBjcmVhdG9yLmNyZWF0ZSgpO1xuICAgIGNvbnN0IHsgbXNpRmlsZSB9ID0gYXdhaXQgY3JlYXRvci5jb21waWxlKCk7XG5cbiAgICByZXR1cm4gW21zaUZpbGVdO1xuICB9XG59XG4iXX0=